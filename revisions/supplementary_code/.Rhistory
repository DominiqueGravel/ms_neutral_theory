plot(S,I*I^b,type="l", ylab = "Dispersal probability")
S
S = 1-R-I
plot(S,I*I^b,type="l", ylab = "Dispersal probability")
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
b = 0.01
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
b = 0.1
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
b = 0.5
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
b = 1.25
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
b = 5
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
plot(I,S*I^b,type="l", ylab = "Dispersal probability")
Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,2000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
Durée de la simulation#
times = seq(0,250, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
b = 0.55#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,250, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
b = 0.45#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,250, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
16*16
install.packages(pkg=c("ggplot2","plyr","reshape2","gridExtra","hexbin",                 "glmmML","lme4","MCMCglmm","chron",                 "R2jags","coda","MCMCpack",                 "gdata","gtools","gplots","ellipse","plotrix",                 "car","bbmle","rgl","scatterplot3d",                 "abind","aod","arm","beanplot","blme",                 "brglm","rms","Hmisc","optimx","minqa",                 "directlabels","effects","emdbook","R2admb",                 "glmmADMB","influence.ME",                       "mlmRev","multcomp","MuMIn","AICcmodavg",                       "knitr","pscl","RColorBrewer","RLRsim","sos",                       "tweedie"),                dependencies=TRUE,                 repos=c("http://probability.ca/cran",                         "http://r-forge.r-project.org"))install.packages("coefplot2",                 repos="http://www.math.mcmaster.ca/bolker/R",                 type="source")
? ?rbeta
?rbeta
Paramètres:#
# c: taux de colonisation#
# e: taux d'extinction#
# l: pourcentage de dispersion locale#
# N: nombre de patches en X#
# p0: distribution de départ (0: absence, 1: présence, dimension NxN)#
# nstep: nombre de pas de temps#
# D: matrice de destruction d'habitat (0: inhabitable, 1: habitable, dimension NxN)#
#
###########################
#
Levins_local = function(c,e,l,N,p0,nstep,D) {#
	# Initialisation de la la métapopulation#
	metpop = p0	#
	# Matrice dans laquelle on enregistre l'abondnace régionale#
	# au fil du temps#
	res = matrix(nr=nstep,nc=2)#
	# boucle sur les pas de temps#
	for(t in 1:nstep) {#
		# boucle sur les N patches#
		for(n in 1:N^2) {#
			# On choisi une patche au hasard à mettre à jour#
     		x0 = ceiling(runif(1,0,1)*N)#
      		y0 = ceiling(runif(1,0,1)*N)#
			# On vérifie si la patche est habitable#
			if(D[x0,y0] == 1) {#
				# Si la patche est occupée, on teste s'il y a extinction#
				if(metpop[x0,y0] == 1) {#
					# On tire un nombre au hasard entre 0 et 1#
					rand = runif(1,0,1)#
					# On teste si ce nombre est inférieur à la probabilité d'extinction#
					if(rand < e) metpop[x0,y0] = 0#
					}#
				# Si la patche est vide, on teste s'il y a colonisation#
				else {#
					# On tire un nombre au hasard entre 0 et 1#
					rand = runif(1,0,1)#
					# On calcul l'abondance régionale#
					pr = sum(metpop)/N^2		#
					# On calcul l'abondance dans le voisinage#
					# On tient compte de la forme de torus de la lattice#
					# On crée d'abord un compteur du nombre de voisins occupés#
			        pl = 0#
			        # Ensuite on calcul la densité sur les 8 voisins#
			        for(x in -1:1) {#
	    		      for(y in -1:1) {#
	        		    # Si on dépasse les marges de la lattice, on rejoint les bordures#
	            		if(x0 + x < 1) x1 = N#
	            		else if(x0 + x > N) x1 = 1#
	            		else x1 = x0 + x#
	  		            if(y0 + y < 1) y1 = N#
    	        		else if(y0 + y > N) y1 = 1#
    	        		else y1 = y0 + y#
#
   		         		if(x1 != 0 & y1!= 0)#
    	              		if(D[x1,y1]==1 & metpop[x1,y1] == 1) pl = pl+1#
    	        		}#
    	    		}#
					# On calcul le taux de colonisation moyen#
					col = l*c*pl/8 + (1-l)*c*pr#
					# On test s'il y a colonisation#
					if(rand < col) metpop[x0,y0] = 1#
				}	#
			}								#
		}#
		# À chaque pas de temps, on enregistre l'abondance#
		res[t,1] = t#
		res[t,2] = sum(metpop)/N^2				#
		}#
	return(list(res,metpop))#
	}#
# Exemple#
c = 0.5#
e = 0.35#
l = 0.1#
N = 25#
p0 = matrix(0,nr=N,nc=N)#
p0[matrix(runif(N^2,0,1),nr=N,nc=N)<0.1]=1#
D = matrix(1,nr=N,nc=N)#
#
# Illustration de l'abondance régionale au fil du temps#
s0 = Levins_local(c=c,e=e,l=0,N=N,p0=p0,nstep=250,D=D)#
s1 = Levins_local(c=c,e=e,l=0.9,N=N,p0=p0,nstep=250,D=D)#
quartz()#
par(mar=c(5,6,2,1))#
plot(s0[[1]][,1],s0[[1]][,2],type="l",xlab = "Temps", ylab = "Abondance régionale",cex.axis = 1.5,cex.lab=2)#
lines(s1[[1]][,1],s1[[1]][,2],col="red")#
#
# Illustration de la distribution spatiale au terme de la simulation#
quartz()#
par(mar=c(5,6,2,1))#
image(c(1:N),c(1:N),s0[[2]],cex.axis = 1.5, cex.lab = 2,col=gray(c(0,1)),xlab = "X", ylab = "Y", main = "Dispersion globale")#
#
quartz()#
par(mar=c(5,6,2,1))#
image(c(1:N),c(1:N),s1[[2]],cex.axis = 1.5, cex.lab = 2,col=gray(c(0,1)),xlab = "X", ylab = "Y", main = "Dispersion locale")
D = c(1:10)
plot(D,D^0.5)
D = c(1:100)
plot(D,D^0.5)
.5*.2
1/.75
.25/.75
1185500-94800
21*17
21*17/48
4*8
21*17/32
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {	#
		dS = a1*(1-S-I) - a2*S*I*I^b - a3*S#
		dI = a2*S*I*I^b + a3*S - a4*I #
		list(c(dS,dI))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,10000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {	#
		dS = a1*(1-S-I) - a2*S*I*I^b - a3*S#
		dI = a2*S*I*I^b + a3*S - a4*I #
		list(c(dS,dI))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
S = 0.3#
I = 0.7#
R = 0#
#
u = 0#
w = 50^-1#
b = .3#
g = 10^-1 #
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	rand = rnorm(1,0,sd=SD)#
#	rand[rand<0]=0#
	dS 	= w*R - (b*S*I+rand*S)#
	dI = (b*S*I+rand*S) - g*I#
	dR = g*I - w*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
lines(res[,1],res[,5],type="l",col = "red", lwd = 0.5)
S = 0.3#
I = 0.7#
R = 0#
#
u = 0#
w = 50^-1#
b = .3#
g = 10^-1 #
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.01#
#
for(i in 1:nrow(res)) {#
#	rand = rnorm(1,0,sd=SD)#
#	rand[rand<0]=0#
	dS 	= w*R - (b*S*I+rand*S)#
	dI = (b*S*I+rand*S) - g*I#
	dR = g*I - w*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
u = 0#
w = 50^-1#
b = .3#
g = 10^-1 #
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.05#
#
for(i in 1:nrow(res)) {#
#	rand = rnorm(1,0,sd=SD)#
#	rand[rand<0]=0#
	dS 	= w*R - (b*S*I+rand*S)#
	dI = (b*S*I+rand*S) - g*I#
	dR = g*I - w*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
u = 0#
w = 50^-1#
b = .3#
g = 10^-1 #
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.05#
#
for(i in 1:nrow(res)) {#
	rand = rnorm(1,0,sd=SD)#
#	rand[rand<0]=0#
	dS 	= w*R - (b*S*I+rand*S)#
	dI = (b*S*I+rand*S) - g*I#
	dR = g*I - w*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
u = 0#
w = 50^-1#
b = .3#
g = 10^-1 #
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.01#
#
for(i in 1:nrow(res)) {#
	rand = rnorm(1,0,sd=SD)#
#	rand[rand<0]=0#
	dS 	= w*R - (b*S*I+rand*S)#
	dI = (b*S*I+rand*S) - g*I#
	dR = g*I - w*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
u = 0#
w = 50^-1#
b = .3#
g = 10^-1 #
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.2#
#
for(i in 1:nrow(res)) {#
	rand = rnorm(1,0,sd=SD)#
#	rand[rand<0]=0#
	dS 	= w*R - (b*S*I+rand*S)#
	dI = (b*S*I+rand*S) - g*I#
	dR = g*I - w*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
u = 0#
w = 50^-1#
b = .3#
g = 10^-1 #
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.5#
#
for(i in 1:nrow(res)) {#
	rand = rnorm(1,0,sd=SD)#
#	rand[rand<0]=0#
	rand[rand<0] = 0#
	dS 	= w*R - (b*S*I+rand*S)#
	dI = (b*S*I+rand*S) - g*I#
	dR = g*I - w*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
u = 0#
w = 50^-1#
b = .3#
g = 10^-1 #
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	rand = rnorm(1,0,sd=SD)#
#	rand[rand<0]=0#
	rand[rand<0] = 0#
	dS 	= w*R - (b*S*I+rand*S)#
	dI = (b*S*I+rand*S) - g*I#
	dR = g*I - w*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 1#
a3 = 0.2#
a4 = 10^-1#
return_interval = 10^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 1#
a3 = 0.2#
a4 = 10^-1#
period = 10^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 0.2#
a3 = 0.2#
a4 = 10^-1#
period = 10^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 0.1#
a3 = 0.2#
a4 = 10^-1#
period = 10^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 0.1#
a3 = 0.01#
a4 = 10^-1#
period = 10^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 0.2#
a3 = 0.01#
a4 = 10^-1#
period = 10^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 0.5#
a3 = 0.01#
a4 = 10^-1#
period = 10^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 0.3#
a3 = 0.01#
a4 = 10^-1#
period = 10^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 0.2#
a3 = 0.01#
a4 = 10^-1#
period = 10^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 0.1#
a3 = 0.01#
a4 = 10^-1#
period = 10^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 0.1#
a3 = 0.1#
a4 = 10^-1#
period = 10^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 0.2#
a3 = 0.1#
a4 = 10^-1#
period = 10^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
plot(res[,1],res[,2],type="l",ylim = c(0,1))
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 0.2#
a3 = 0.4#
a4 = 10^-1#
period = 10^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 0.2#
a3 = 0.6#
a4 = 10^-1#
period = 10^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 0.2#
a3 = 0.1#
a4 = 10^-1#
period = 10^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 0.1#
a3 = 0.1#
a4 = 10^-1#
period = 10^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 0.1#
a3 = 0.1#
a4 = 10^-1#
period = 50^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 0.2#
a3 = 0.1#
a4 = 10^-1#
period = 50^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 1#
a3 = 0.1#
a4 = 10^-1#
period = 50^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 1#
a3 = 0.9#
a4 = 10^-1#
period = 50^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 1#
a3 = 0.9#
a4 = 5^-1#
period = 50^-1#
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1)<period) A3 = a3#
	dS 	= a1*R - (a2*S*I+A3*S)#
	dI = (a2*S*I+A3*S) - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 1#
a3 = 0.9#
a4 = 5^-1#
period = 10^-1#
#
dt = 1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1) < period) A3 = a3#
	dS = a1*R - a2*S*I - A3*S#
	dI = a2*S*I + A3*S - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = 1#
a3 = .5#
a4 = 5^-1#
period = 10^-1#
#
dt = 1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1) < period) A3 = a3#
	dS = a1*R - a2*S*I - A3*S#
	dI = a2*S*I + A3*S - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = .2#
a3 = .5#
a4 = 1^-1#
period = 10^-1#
#
dt = 1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1) < period) A3 = a3#
	dS = a1*R - a2*S*I - A3*S#
	dI = a2*S*I + A3*S - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = .2#
a3 = .5#
a4 = 1^-1#
period = 20^-1#
#
dt = 1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1) < period) A3 = a3#
	dS = a1*R - a2*S*I - A3*S#
	dI = a2*S*I + A3*S - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))
S = 0.3#
I = 0.7#
R = 0#
#
a1 = 40^-1#
a2 = .2#
a3 = .5#
a4 = 1^-1#
period = 30^-1#
#
dt = 1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1) < period) A3 = a3#
	dS = a1*R - a2*S*I - A3*S#
	dI = a2*S*I + A3*S - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1) < period) A3 = a3#
	dS = a1*R - a2*S*I - A3*S#
	dI = a2*S*I + A3*S - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = A3	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))#
#
lines(res[,1],res[,5],col = "red")
S = 0.3#
I = 0.7#
R = 0#
#
# Recovery#
a1 = 40^-1#
#
# Spreading#
a2 = .2#
#
# Ignition probability (during favourable years)#
a3 = .5#
#
# Duration of the outbreak#
a4 = 10^-1#
#
# average time between two favorable events#
period = 30^-1#
#
dt = 1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1) < period) A3 = a3#
	dS = a1*R - a2*S*I - A3*S#
	dI = a2*S*I + A3*S - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = A3	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))#
#
lines(res[,1],res[,5],col = "red")
S = 0.3#
I = 0.7#
R = 0#
#
# Recovery#
a1 = 40^-1#
#
# Spreading#
a2 = .2#
#
# Ignition probability (during favourable years)#
a3 = .5#
#
# Duration of the outbreak#
a4 = 10^-1#
#
# average time between two favorable events#
period = 30^-1#
#
dt = 1#
nstep = 150#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1) < period) A3 = a3#
	dS = a1*R - a2*S*I - A3*S#
	dI = a2*S*I + A3*S - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = A3	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))#
#
lines(res[,1],res[,5],col = "red")
S = 0.3#
I = 0.7#
R = 0#
#
# Recovery#
a1 = 40^-1#
#
# Spreading#
a2 = .2#
#
# Ignition probability (during favourable years)#
a3 = .1#
#
# Duration of the outbreak#
a4 = 10^-1#
#
# average time between two favorable events#
period = 30^-1#
#
dt = 1#
nstep = 150#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1) < period) A3 = a3#
	dS = a1*R - a2*S*I - A3*S#
	dI = a2*S*I + A3*S - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = A3	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))#
#
lines(res[,1],res[,5],col = "red")
S = 0.3#
I = 0.7#
R = 0#
#
# Recovery#
a1 = 40^-1#
#
# Spreading#
a2 = .5#
#
# Ignition probability (during favourable years)#
a3 = .1#
#
# Duration of the outbreak#
a4 = 10^-1#
#
# average time between two favorable events#
period = 30^-1#
#
dt = 1#
nstep = 250#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1) < period) A3 = a3#
	dS = a1*R - a2*S*I - A3*S#
	dI = a2*S*I + A3*S - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = A3	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))#
#
lines(res[,1],res[,5],col = "red")
S = 0.3#
I = 0.7#
R = 0#
#
# Recovery#
a1 = 40^-1#
#
# Spreading#
a2 = .05#
#
# Ignition probability (during favourable years)#
a3 = .1#
#
# Duration of the outbreak#
a4 = 10^-1#
#
# average time between two favorable events#
period = 30^-1#
#
dt = 1#
nstep = 250#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1) < period) A3 = a3#
	dS = a1*R - a2*S*I - A3*S#
	dI = a2*S*I + A3*S - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = A3	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))#
#
lines(res[,1],res[,5],col = "red")
S = 0.3#
I = 0.7#
R = 0#
#
# Recovery#
a1 = 40^-1#
#
# Spreading#
a2 = .05#
#
# Ignition probability (during favourable years)#
a3 = .1#
#
# Duration of the outbreak#
a4 = 5^-1#
#
# average time between two favorable events#
period = 30^-1#
#
dt = 1#
nstep = 250#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1) < period) A3 = a3#
	dS = a1*R - a2*S*I - A3*S#
	dI = a2*S*I + A3*S - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = A3	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))#
#
lines(res[,1],res[,5],col = "red")
S = 0.3#
I = 0.7#
R = 0#
#
# Recovery#
a1 = 40^-1#
#
# Spreading#
a2 = .1#
#
# Ignition probability (during favourable years)#
a3 = .1#
#
# Duration of the outbreak#
a4 = 5^-1#
#
# average time between two favorable events#
period = 30^-1#
#
dt = 1#
nstep = 250#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1) < period) A3 = a3#
	dS = a1*R - a2*S*I - A3*S#
	dI = a2*S*I + A3*S - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = A3	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))#
#
lines(res[,1],res[,5],col = "red")
S = 0.3#
I = 0.7#
R = 0#
#
# Recovery#
a1 = 40^-1#
#
# Spreading#
a2 = .2#
#
# Ignition probability (during favourable years)#
a3 = .1#
#
# Duration of the outbreak#
a4 = 5^-1#
#
# average time between two favorable events#
period = 30^-1#
#
dt = 1#
nstep = 250#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1) < period) A3 = a3#
	dS = a1*R - a2*S*I - A3*S#
	dI = a2*S*I + A3*S - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = A3	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))#
#
lines(res[,1],res[,5],col = "red")
S = 0.3#
I = 0.7#
R = 0#
#
# Recovery#
a1 = 30^-1#
#
# Spreading#
a2 = .2#
#
# Ignition probability (during favourable years)#
a3 = .1#
#
# Duration of the outbreak#
a4 = 5^-1#
#
# average time between two favorable events#
period = 30^-1#
#
dt = 1#
nstep = 250#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1) < period) A3 = a3#
	dS = a1*R - a2*S*I - A3*S#
	dI = a2*S*I + A3*S - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = A3	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))#
#
lines(res[,1],res[,5],col = "red")
S = 0.3#
I = 0.7#
R = 0#
#
# Recovery#
a1 = 50^-1#
#
# Spreading#
a2 = .2#
#
# Ignition probability (during favourable years)#
a3 = .1#
#
# Duration of the outbreak#
a4 = 5^-1#
#
# average time between two favorable events#
period = 30^-1#
#
dt = 1#
nstep = 250#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1) < period) A3 = a3#
	dS = a1*R - a2*S*I - A3*S#
	dI = a2*S*I + A3*S - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = A3	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))#
#
lines(res[,1],res[,5],col = "red")
S = 0.3#
I = 0.7#
R = 0#
#
# Recovery#
a1 = 50^-1#
#
# Spreading#
a2 = .2#
#
# Ignition probability (during favourable years)#
a3 = .1#
#
# Duration of the outbreak#
a4 = 5^-1#
#
# average time between two favorable events#
period = 30^-1#
#
dt = 1#
nstep = 500#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	A3 = 0#
	if(runif(1,0,1) < period) A3 = a3#
	dS = a1*R - a2*S*I - A3*S#
	dI = a2*S*I + A3*S - a4*I#
	dR = a4*I - a1*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = A3	#
	}#
#
plot(res[,1],res[,2],type="l",ylim = c(0,1))#
#
lines(res[,1],res[,5],col = "red")
Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {	#
		dS = a1*(1-S-I) - a2*S*I*I^b - a3*S#
		dI = a2*S*I*I^b + a3*S - a4*I #
		list(c(dS,dI))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
v1 = c(12,3,4,5)
v2 = c(1,2,3,5,4)
cor(v1,v2)
cor(cbind(v1,v2))
?cor
cor(x = v1, y = v2)
v1 = c(1,2,3,4,5)
cor(x = v1, y = v2)
K = 1#
a = 0.8#
#
w = 0.6#
p = seq(0.51, 0.99, 0.01)#
m2_drdp =  K*a*((p*(1-w) + w*(1-p) - 1)^2 - w*(1 - w))/((2*w - 1)*(p*(1-w) + w*(1-p) - 1)^2)#
plot(p, m2_drdp,type = "l")#
#
p = 0.6#
w = seq(0.51, 0.99, 0.01)#
m2_drdw = (K*a*p*(1-p)*(2*p - 1))/(p*(1-w) + w*(1-p) - 1)^2#
plot(w, m2_drdw,type = "l")
2*p*(1-w*(1+p))+w-1
(2*p + w - 2*p*w + 2*p^2*w - p^2 - 1)
I = seq(0.1,0.9, 0.001)#
b = 0.5#
plot(b,I^b,type="l")
plot(I,I^b,type="l")
b = 0.8
plot(I,I^b,type="l")
b = 0.25
plot(I,I^b,type="l")
M = 1-I-0.1
c = 0.25
plot(M,M^c,type = "l")
plot(I,M^c,type = "l")
plot(I,I^b*M^c,type = "l")
plot(M,I^b*M^c,type = "l")
plot(M,I^b*M^c*I,type = "l")
plot(M,I^b*M^c,type = "l")
plot(M,M^c,type = "l")
plot(I,exp(-0.5*I),type = "l")
plot(I,exp(-0.01*I),type = "l")
plot(I,exp(-I),type = "l")
plot(I,exp(-2*I),type = "l")
plot(I,exp(-5*I),type = "l")
exp(-Inf)
exp(Inf)
exp(0)
c = 1
ei = 0.1
ed = 0.2
eqp123a =  -(25*ed - 4*c + 28*ei + 16*(c^2/16 - (c*ei)/8 - (ed*c)/32 + ei^2/16 - (ed*ei)/32 - (15*ed^2)/256)^(1/2))/(32*c)
eqp123b = (4*c - 25*ed - 28*ei + 16*(c^2/16 - (c*ei)/8 - (ed*c)/32 + ei^2/16 - (ed*ei)/32 - (15*ed^2)/256)^(1/2))/(32*c)
eqp123a
eqp123b
c = 10#
ei = 0.1#
ed = 0.2#
#
eqp123a =  -(25*ed - 4*c + 28*ei + 16*(c^2/16 - (c*ei)/8 - (ed*c)/32 + ei^2/16 - (ed*ei)/32 - (15*ed^2)/256)^(1/2))/(32*c)#
eqp123b = (4*c - 25*ed - 28*ei + 16*(c^2/16 - (c*ei)/8 - (ed*c)/32 + ei^2/16 - (ed*ei)/32 - (15*ed^2)/256)^(1/2))/(32*c)
eqp123a
eqp123b
c = seq(0.1,10,0.01)
eqp123b = (4*c - 25*ed - 28*ei + 16*(c^2/16 - (c*ei)/8 - (ed*c)/32 + ei^2/16 - (ed*ei)/32 - (15*ed^2)/256)^(1/2))/(32*c)
plot(c,eqp123b,type = "l")
plot(c,eqp123b,type = "l",ylim = c(0,1))
eqp1 = (2*ed + 2*ei)/c + (4*c - 25*ed - 28*ei + 16*(c^2/16 - (c*ei)/8 - (ed*c)/32 + ei^2/16 - (ed*ei)/32 - (15*ed^2)/256)^(1/2))/(16*c)#
#
eqp12 = (ed + ei)/c + (4*c - 25*ed - 28*ei + 16*(c^2/16 - (c*ei)/8 - (ed*c)/32 + ei^2/16 - (ed*ei)/32 - (15*ed^2)/256)^(1/2))/(32*c)#
#
eqp123 = (4*c - 25*ed - 28*ei + 16*(c^2/16 - (c*ei)/8 - (ed*c)/32 + ei^2/16 - (ed*ei)/32 - (15*ed^2)/256)^(1/2))/(32*c)
plot(c, eqp1, type="l", ylim = c(0,1))
lines(c,eqp12,col = "red")
lines(c,eqp123, col = "blue")
i
i/1
data(Benguela)#
#
# Compare weighted and unweighted#
ShortestPaths(Benguela)
library(cheddar)
data(Benguela)#
#
# Compare weighted and unweighted#
ShortestPaths(Benguela)
Benguela
str(Benguela)
Benguela$nodes
576/3.3
4000/3.3
1212*174/10000
X = seq(0,1,by = 1/(N-1))#
	Y = seq(0,1,by = 1/(N-1))#
	XY = grid.expand(X,Y)
N = 10
seq(0,1,by = 1/(N-1))
X = seq(0,1,by = 1/(N-1))#
	Y = seq(0,1,by = 1/(N-1))#
	XY = grid.expand(X,Y)
XY = expand.grid(X,Y)
XY
distMat = as.matrix(dist(XY,method = "euclidean", upper = T, diag = T))
ConMat = matrix(0, nr=N,nc=N)
ConMat[distMat<=1/(N-1)] = 1
diag(ConMat) = 0
ConMat
ConMat = matrix(0, nr=N,nc=N)
ConMat
ConMat = matrix(0, nr=N^2,nc=N^2)
N = 25
X = seq(0,1,by = 1/(N^0.5-1))
Y = seq(0,1,by = 1/(N^0.5-1))
XY = expand.grid(X,Y)
X
XY
distMat = as.matrix(dist(XY,method = "euclidean", upper = T, diag = T))
ConMat = matrix(0, nr=N,nc=N)
ConMat[distMat<=1/(N-1)] = 1
ConMat[distMat<=1/(N^0.5-1)] = 1
ConMat
diag(ConMat) = 0
sin(0)
sin(2*pi)
X = sin(c(0:(N-1))*2*pi/(N-1))
Y = cos(c(0:(N-1))*2*pi/(N-1))
plot(X,Y)
connected = function(N) {#
	X = sin(c(0:(N-1))*2*pi/(N-1))#
	Y = cos(c(0:(N-1))*2*pi/(N-1))#
	ConMat = matrix(1,nr = N, nc = N)#
	diag(ConMat) = 0#
	XY = cbind(X,Y)#
}
connected(25)
test = connected(25)
connected = function(N) {#
	X = sin(c(0:(N-1))*2*pi/(N-1))#
	Y = cos(c(0:(N-1))*2*pi/(N-1))#
	ConMat = matrix(1,nr = N, nc = N)#
	diag(ConMat) = 0#
	XY = cbind(X,Y)#
	return(list(XY,ConMat)) 	#
}#
#
test = connected(25)
Patches = connected(N=25)#
XY = Patches[[1]]#
ConMat = Patches[[2]]#
#
plot(XY[,1],XY[,2],xlab = "X", ylab = "Y",cex.lab = 1.5, cex.axis = 1.25)#
ConVec = stack(as.data.frame(ConMat))[,1]#
XX = expand.grid(XY[,1],XY[,1])#
YY = expand.grid(XY[,2],XY[,2])#
XX = subset(XX,ConVec==1)#
YY = subset(YY,ConVec==1)#
arrows(x0 = XX[,1],x1=XX[,2],y0 = YY[,1], y1 = YY[,2], length = 0,lwd = 0.1)
points(XY[,1],XY[,2],pch=21,bg="darkblue")
points(XY[,1],XY[,2],pch=21,bg="blue")
quartz(height = 5, width = 6)#
par(mar=c(5,6,2,1))#
Patches = connected(N=25)#
XY = Patches[[1]]#
ConMat = Patches[[2]]#
#
plot(XY[,1],XY[,2],xlab = "X", ylab = "Y",cex.lab = 1.5, cex.axis = 1.25)#
ConVec = stack(as.data.frame(ConMat))[,1]#
XX = expand.grid(XY[,1],XY[,1])#
YY = expand.grid(XY[,2],XY[,2])#
XX = subset(XX,ConVec==1)#
YY = subset(YY,ConVec==1)#
arrows(x0 = XX[,1],x1=XX[,2],y0 = YY[,1], y1 = YY[,2], length = 0,lwd = 0.1)#
points(XY[,1],XY[,2],pch=21,bg="blue")
quartz(height = 5.5, width = 6)#
par(mar=c(5,6,2,1))#
Patches = connected(N=25)#
XY = Patches[[1]]#
ConMat = Patches[[2]]#
#
plot(XY[,1],XY[,2],xlab = "X", ylab = "Y",cex.lab = 1.5, cex.axis = 1.25)#
ConVec = stack(as.data.frame(ConMat))[,1]#
XX = expand.grid(XY[,1],XY[,1])#
YY = expand.grid(XY[,2],XY[,2])#
XX = subset(XX,ConVec==1)#
YY = subset(YY,ConVec==1)#
arrows(x0 = XX[,1],x1=XX[,2],y0 = YY[,1], y1 = YY[,2], length = 0,lwd = 0.1)#
points(XY[,1],XY[,2],pch=21,bg="blue")
9*15000
9*15000*8
XY = matrix(nc = 2, nr = N)#
#
	# First node coordinate:#
	XY[1,1] = 0#
	XY[1,2] = 0	#
	n = 2
nlevel = length(subset(XY[,1],XY[,1] == n-1))
nlevel
subset(XY[,1],XY[,1] == n-1)
XY
First node coordinate:#
	XY[1,1] = 1#
	XY[1,2] = 0
length(subset(XY[,1],XY[,1] == n-1))
X = rnorm(N, 0, 1)
Y = rexp(N, rate = 1)
plot(X,Y)
Y = runif(N,0,1)
plot(X,Y)
X = runif(N, 0, 1)
Y = runif(N,0,1)
plot(X,Y)
X = sort(runif(N, 0, 1))
Y = runif(N,0,1)
plot(X,Y)
X = sort(runif(N,0,1))#
	Y = runif(N,0,1)
plot(X,Y)
i = 2
which.min(distMat[,i])
X = sort(runif(N,0,1))#
	Y = runif(N,0,1)#
	XY = cbind(X,Y)#
	distMat = as.matrix(dist(XY,method = "euclidean", upper = T, diag = T))	#
	ConMat = matrix(0, nr=N,nc=N)
which.min(distMat[,i])
distMat[,i]
diag(distMat) = 999
which.min(distMat[,i])
distMat[,i]
t=distMat[,i]
t
t=which.min(distMat[,i])
t
t[1]
t[2]
t[2]t*2
t[2]*2
t*2
t*10
X = sort(runif(N,0,1))#
	Y = runif(N,0,1)#
	XY = cbind(X,Y)#
	distMat = as.matrix(dist(XY,method = "euclidean", upper = T, diag = T))	#
	diag(distMat) = 999#
	ConMat = matrix(0, nr=N,nc=N)
nlinks = apply(ConMat,2,sum)
nlinks
0.8*178000
0.8*178000-118000
255/3*2
20*7.42
0.86*8*14
40+84+110+208
Source code for the figures 1-4 in the paper#
# Gravel, Poisot and Desjardins. 2013. Using neutral theory to reveal the contribution of dispersal to community assembly in complex landscapes. J. Limnology. #
##
# By: Dominique Gravel (dominique_gravel@uqar.ca) #
# April 2013#
##
#########################################################################
source("spatial_graphs.R")#
source("patch_model.R")#
source("lottery_model.R")#
library(vegan)#
#
################################
# Useful functions#
alpha_fn = function(pres) {#
	s = apply(pres,1,sum)#
	vec.col = numeric(length(s))#
	RK = rank(s)#
	for(i in 1:n) vec.col[i] = rainbow(n,start = 0, end = 0.7)[RK[i]]#
	return(vec.col)	#
}#
#
plot_alpha = function(spatial_graph, vec.col) {#
  	# Plots a spatial graph #
  	##
  	# Args:#
  	#   spatia_graph: the output of one of the spatial graphs#
  	##
	par(mar=c(1,1,1,1))#
	XY = spatial_graph[[1]]#
	adjMat = spatial_graph[[2]]#
#
	plot(XY[,1],XY[,2],xlab = "", ylab = "",cex = 1.5,labels = F)#
	adjVec = stack(as.data.frame(adjMat))[,1]#
	XX = expand.grid(XY[,1],XY[,1])#
	YY = expand.grid(XY[,2],XY[,2])#
	XX = subset(XX,adjVec==1)#
	YY = subset(YY,adjVec==1)#
	arrows(x0 = XX[,1],x1=XX[,2],y0 = YY[,1], y1 = YY[,2], length = 0,lwd = 0.2, col = "darkgrey")#
	points(XY[,1],XY[,2],pch=21,bg=vec.col,cex = 1.5)#
}#
#
################################
# General parameters#
S = 100#
n = 25#
r = 0.3
Draw the four landscapes#
connected = connected_fn(n)#
lattice = lattice_fn(n)#
geograph = geograph_fn(n,r)#
geotree = geotree_fn(n,r)
Neutral dynamics#
# Specific parameters#
m = 0.2#
M = 0.01#
d = 0.1#
J = 100#
sdN = Inf#
sdE = 5#
nsteps = 1000#
#
# Simulations#
neutralConnected = lottery_model(m,M,d,S,J,sdE,sdN,connected,nsteps)#
neutralLattice = lottery_model(m,M,d,S,J,sdE,sdN,lattice,nsteps)#
neutralGeograph = lottery_model(m,M,d,S,J,sdE,sdN,geograph,nsteps)#
neutralGeotree = lottery_model(m,M,d,S,J,sdE,sdN,geotree,nsteps)#
#
# Alpha diversity#
alphaNeutralConnected = alpha_fn(neutralConnected[[1]])#
alphaNeutralLattice = alpha_fn(neutralLattice[[1]])#
alphaNeutralGeograph = alpha_fn(neutralGeograph[[1]])#
alphaNeutralGeotree = alpha_fn(neutralGeotree[[1]])#
#
# Beta diversity#
betaNeutralConnected = as.matrix(vegdist(neutralConnected[[1]],method = "bray",diag=T,upper=T))#
betaNeutralLattice = as.matrix(vegdist(neutralLattice[[1]],method = "bray",diag=T,upper=T))#
betaNeutralGeograph = as.matrix(vegdist(neutralGeograph[[1]],method = "bray",diag=T,upper=T))#
betaNeutralGeotree = as.matrix(vegdist(neutralGeotree[[1]],method = "bray",diag=T,upper=T))#
#
################
# Species sorting dynamics#
# Specific parameters#
m = 0.2#
M = 0.01#
d = 0.1#
J = 100#
sdN = 15#
sdE = 5#
nsteps = 1000#
#
# Simulations#
ssConnected = lottery_model(m,M,d,S,J,sdE,sdN,connected,nsteps)#
ssLattice = lottery_model(m,M,d,S,J,sdE,sdN,lattice,nsteps)#
ssGeograph = lottery_model(m,M,d,S,J,sdE,sdN,geograph,nsteps)#
ssGeotree = lottery_model(m,M,d,S,J,sdE,sdN,geotree,nsteps)#
#
# Alpha diversity#
alphaSSConnected = alpha_fn(ssConnected[[1]])#
alphaSSLattice = alpha_fn(ssLattice[[1]])#
alphaSSGeograph = alpha_fn(ssGeograph[[1]])#
alphaSSGeotree = alpha_fn(ssGeotree[[1]])#
#
# Beta diversity#
betaSSConnected = as.matrix(vegdist(ssConnected[[1]],method = "bray",diag=T,upper=T))#
betaSSLattice = as.matrix(vegdist(ssLattice[[1]],method = "bray",diag=T,upper=T))#
betaSSGeograph = as.matrix(vegdist(ssGeograph[[1]],method = "bray",diag=T,upper=T))#
betaSSGeotree = as.matrix(vegdist(ssGeotree[[1]],method = "bray",diag=T,upper=T))
quartz(height = 5, width = 3)#
t = matrix(c(1:4),nr = 4, nc = 1, byrow = T)#
layout(t)#
layout.show(4)#
#
#plot_alpha(connected,alphaPatchConnected)#
plot_alpha(connected,alphaNeutralConnected)#
#plot_alpha(connected,alphaSSConnected)#
#
#plot_alpha(lattice,alphaPatchLattice)#
plot_alpha(lattice,alphaNeutralLattice)#
#plot_alpha(lattice,alphaSSLattice)#
#
#plot_alpha(geograph,alphaPatchGeograph)#
plot_alpha(geograph,alphaNeutralGeograph)#
#plot_alpha(geograph,alphaSSGeograph)#
#
#plot_alpha(geotree,alphaPatchGeotree)#
plot_alpha(geotree,alphaNeutralGeotree)#
#plot_alpha(geotree,alphaSSGeotree)
quartz(height = 7, width = 3)#
t = matrix(c(1:4),nr = 4, nc = 1, byrow = T)#
layout(t)#
layout.show(4)#
#
#plot_alpha(connected,alphaPatchConnected)#
plot_alpha(connected,alphaNeutralConnected)#
#plot_alpha(connected,alphaSSConnected)#
#
#plot_alpha(lattice,alphaPatchLattice)#
plot_alpha(lattice,alphaNeutralLattice)#
#plot_alpha(lattice,alphaSSLattice)#
#
#plot_alpha(geograph,alphaPatchGeograph)#
plot_alpha(geograph,alphaNeutralGeograph)#
#plot_alpha(geograph,alphaSSGeograph)#
#
#plot_alpha(geotree,alphaPatchGeotree)#
plot_alpha(geotree,alphaNeutralGeotree)#
#plot_alpha(geotree,alphaSSGeotree)
quartz(height = 6, width = 6/4)#
t = matrix(c(1:4),nr = 4, nc = 1, byrow = T)#
layout(t)#
layout.show(4)#
#
#plot_alpha(connected,alphaPatchConnected)#
plot_alpha(connected,alphaNeutralConnected)#
#plot_alpha(connected,alphaSSConnected)#
#
#plot_alpha(lattice,alphaPatchLattice)#
plot_alpha(lattice,alphaNeutralLattice)#
#plot_alpha(lattice,alphaSSLattice)#
#
#plot_alpha(geograph,alphaPatchGeograph)#
plot_alpha(geograph,alphaNeutralGeograph)#
#plot_alpha(geograph,alphaSSGeograph)#
#
#plot_alpha(geotree,alphaPatchGeotree)#
plot_alpha(geotree,alphaNeutralGeotree)#
#plot_alpha(geotree,alphaSSGeotree)
quartz(height = 6.5, width = 6.5/4)#
t = matrix(c(1:4),nr = 4, nc = 1, byrow = T)#
layout(t)#
layout.show(4)#
#
#plot_alpha(connected,alphaPatchConnected)#
plot_alpha(connected,alphaNeutralConnected)#
#plot_alpha(connected,alphaSSConnected)#
#
#plot_alpha(lattice,alphaPatchLattice)#
plot_alpha(lattice,alphaNeutralLattice)#
#plot_alpha(lattice,alphaSSLattice)#
#
#plot_alpha(geograph,alphaPatchGeograph)#
plot_alpha(geograph,alphaNeutralGeograph)#
#plot_alpha(geograph,alphaSSGeograph)#
#
#plot_alpha(geotree,alphaPatchGeotree)#
plot_alpha(geotree,alphaNeutralGeotree)#
#plot_alpha(geotree,alphaSSGeotree)
dev.copy2pdf(file = "Networks.pdf")
Figure 1#
quartz(height = 6.5, width = 6.5/4)#
t = matrix(c(1:4),nr = 4, nc = 1, byrow = T)#
layout(t)#
layout.show(4)#
#
#plot_alpha(connected,alphaPatchConnected)#
plot_alpha(connected,alphaNeutralConnected)#
#plot_alpha(connected,alphaSSConnected)#
#
#plot_alpha(lattice,alphaPatchLattice)#
plot_alpha(lattice,alphaNeutralLattice)#
#plot_alpha(lattice,alphaSSLattice)#
#
#plot_alpha(geograph,alphaPatchGeograph)#
plot_alpha(geograph,alphaNeutralGeograph)#
#plot_alpha(geograph,alphaSSGeograph)#
#
#plot_alpha(geotree,alphaPatchGeotree)#
plot_alpha(geotree,alphaNeutralGeotree)#
#plot_alpha(geotree,alphaSSGeotree)#
#
dev.copy2pdf(file = "Networks.pdf")
Examples of dynamics on spatial graphs with different metacommunity perspectives#
##
# By: Dominique Gravel (dominique_gravel@uqar.ca) #
# April 2013#
##
#########################################################################
################################
# General parameters#
S = 100#
n = 25#
r = 0.3#
nsteps = 100#
#
#########################################
#########################################
# Patch dynamics example#
source("spatial_graphs.R")#
source("patch_model.R")#
c = 0.2#
e = 0.1#
spatial_graph = geograph(n, r)#
results = patch_model(c, e, S, spatial_graph, nsteps)#
#
# Figure 1: time series#
x11(height = 5.5, width = 6)#
plot(c(1:nsteps),apply(results[[2]][,2:(S+1)],1,sum),xlab = "Time", ylab = "Average local species richness",cex.lab = 1.5, cex.axis = 1.25, type = "l", ylim = c(0,S))#
#
# Figure 2: local species richness#
s = apply(results[[1]],1,sum)#
vec.col = numeric(length(s))#
RK = rank(s)#
for(i in 1:n) vec.col[i] = rainbow(n,start = 0, end = 0.7)[RK[i]]#
plot_spatial(spatial_graph, vec.col)#
#
#########################################
#########################################
# Neutral example#
source("spatial_graphs.R")#
source("lottery_model.R")#
# Default parameters#
m = 0.2#
M = 0.01#
k = 0.1#
J = 100#
sdN = Inf#
sdE = 5#
spatial_graph = geograph_fn(n,r)#
results = lottery_model(m,M,k,S,J,sdE,sdN,spatial_graph,nsteps)#
#
# Figure 1: time series#
x11(height = 5.5, width = 6)#
plot(c(1:nsteps),apply(results[[2]][,2:(S+1)],1,sum),xlab = "Time", ylab = "Average local species richness",cex.lab = 1.5, cex.axis = 1.25, type = "l", ylim = c(0,S))#
#
# Figure 2: local species richness#
s = apply(results[[1]],1,sum)#
vec.col = numeric(length(s))#
RK = rank(s)#
for(i in 1:n) vec.col[i] = rainbow(n,start = 0, end = 0.7)[RK[i]]#
plot_spatial(spatial_graph, vec.col)#
#########################################
#########################################
# Species sorting example#
source("spatial_graphs.R")#
source("lottery_model.R")#
# Default parameters#
m = 0.2#
M = 0.01#
k = 0.1#
J = 100#
sdN = 15#
sdE = 5#
spatial_graph = geograph_fn(n,r)#
results = lottery_model(m,M,k,S,J,sdE,sdN,spatial_graph,nsteps)#
#
# Figure 1: time series#
x11(height = 5.5, width = 6)#
plot(c(1:nsteps),apply(results[[2]][,2:(S+1)],1,sum),xlab = "Time", ylab = "Average local species richness",cex.lab = 1.5, cex.axis = 1.25, type = "l", ylim = c(0,S))#
#
# Figure 2: local species richness#
s = apply(results[[1]],1,sum)#
vec.col = numeric(length(s))#
RK = rank(s)#
for(i in 1:n) vec.col[i] = rainbow(n,start = 0, end = 0.7)[RK[i]]#
plot_spatial(spatial_graph, vec.col)
