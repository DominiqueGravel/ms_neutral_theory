m = 0.2
(2*(e1 + e2 - 4*m))/(e1 + e2)
m = 0.01
(2*(e1 + e2 - 4*m))/(e1 + e2)
m = 0.1#
a1 = 0.15#
a2 = 0.15#
K = 1#
p = seq(0.4,0.5,0.001)#
e1 = 0.2#
e2 = 0.2#
eqF = -(m*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(
6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2
*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 -
K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + a*e2*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*
e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*
a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*
a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m -
6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)))^2 - 2*K*m*p + 2*K*m*p^2 - 2*m*p*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p
*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m -
2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*
e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + 2*K^2*a*e1*p^2 - 2*K^2*a*e1*p^3 - 2*a*e2*p*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p
^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27
*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*
p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2
*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)))^2 - K*a*e2*p*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2
- 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*(
(((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a
*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + K*a*e1*p^2*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p
^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 +
10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p
^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*
p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + K*a*e2*p^2*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2
*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)/2 - 3^(1/2)*(((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3)*(i/2) + ((m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e
1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)*(-i/18))/(a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))) + (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)/(3*a*e2*(2*p - 1)) + (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a
*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)/(18*a^2*e2^2*(2*p - 1)^2*((((K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^2 - (m^2 - 4*m^2*p + 4*m^2*p^2 + K^2*a^2*e2^2*p^2 - 2*K^2*a^2*e2^2*p^3 + K^2*a^2*e2^2*p^4 + 5*K*a*e2*m*p - 3*K^2*a^2*e1*e2*p^2 + 6*K^2*a^2*e1*e2*p^3 - 3*K^2*a^2*e1*e2*p^4 - 15*K*a*e2*m*p^2 + 10*K*a*e2*m*p^3)^3/(729*a^6*e2^6*(2*p - 1)^6))^(1/2) - (m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)^3/(27*a^3*e2^3*(2*p - 1)^3) + (K^2*m*p^2*(p - 1)^2)/(a*e2*(2*p - 1)^2) + (K*p*(p - 1)*(m - 2*m*p + 2*K*a*e2*p^2 - 2*K*a*e2*p)*(3*m - 6*m*p + K*a*e1*p^2 + K*a*e2*p^2 - K*a*e1*p - K*a*e2*p))/(6*a^2*e2^2*(2*p - 1)^3))^(1/3))))/(K^2*a^2*e1*p^2*(p - 1))#
quartz(height = 5, width = 6)#
par(mar=c(5,6,2,1))#
plot(1-p,eqF,type="l",xlab = "Relative carrying capacity of prey species 1", ylab = "Equilibrium predator density", cex.lab = 1.5, cex.axis = 1.25,lwd = 1.5)
226+216+198
R = 0.2
M = seq(0,1-R,0.001)
I = 1-R-M
plot(I,I^0.5,type="l")
plot(I,I^2,type="l")
plot(M,M*I^2,type="l")
plot(M,M*I^0.5,type="l")
plot(M,M*I^0.1,type="l")
plot(M,M*I^2,type="l")
plot(M,M*I^5,type="l")
plot(M,M*I^1.2,type="l")
plot(M,M*I^1,type="l")
plot(M,M*I^1*.1,type="l")
plot(M,M*I^1*I,type="l")
plot(M,M*I^2*I,type="l")
plot(M,M*I^0.5*I,type="l")
plot(M,M*I^0.25*I,type="l")
plot(M,M*I,type="l")
plot(M,M*I^0.5,type="l")
plot(M,M*I^0,type="l")
plot(M,M*I^0.1,type="l")
plot(M,M*I^-0.1,type="l")
plot(M,M*I^-0.5,type="l")
plot(M,I^-0.5,type="l")
plot(M,I^0.5,type="l")
plot(M,M*I^0.5,type="l")
S = 0.3#
I = 0.7#
R = 0#
#
u = 0#
w = 50^-1#
b = .3#
g = 10^-1 #
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.3#
#
for(i in 1:nrow(res)) {#
	rand = rnorm(1,0,sd=SD)#
	dS 	= u + w*R - (b*S*I+rand*S) - u*S#
	dI = (b*S*I+rand*S) - g*I - u*I#
	dR = g*I - w*R - u*R#
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")#
#
lines(res[,1],res[,5],type="l",col = "red", lwd = 0.5)
plot(res[,1],res[,2],type="l")
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.1#
a3 = 0#
a4 = 0.1#
b = 0#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,250, by = 0.01)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.1#
a3 = 0#
a4 = 0.1#
b = 0#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,100, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.1#
a3 = 0#
a4 = 0.1#
b = 0#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.5#
a3 = 0#
a4 = 0.1#
b = 0#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.2#
a3 = 0#
a4 = 0.1#
b = 0#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.2#
a3 = 0#
a4 = 0.1#
b = 0.1#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.2#
a3 = 0#
a4 = 0.1#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 2#
a3 = 0#
a4 = 0.1#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 2#
a3 = 0#
a4 = 0.1#
b = 2#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 10#
a3 = 0#
a4 = 0.1#
b = 2#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 10#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 5#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 2#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = .5#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 2.5#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 3.5#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 4.5#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 5.5#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 5#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 4.9#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 4.8#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 4.7#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 4.6#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 4.65#
a3 = 0#
a4 = 0.1#
b = 1.25#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 4.65#
a3 = 0#
a4 = 0.1#
b = -0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 2#
a3 = 0#
a4 = 0.1#
b = -0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 1#
a3 = 0#
a4 = 0.1#
b = -0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.2#
a3 = 0#
a4 = 0.1#
b = -0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.2#
a3 = 0#
a4 = 0.1#
b = -1#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.2#
a3 = 0#
a4 = 0.1#
b = -2#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 0.2#
a3 = 0#
a4 = 0.1#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 1#
a3 = 0#
a4 = 0.1#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 1#
a3 = 0#
a4 = 0.1#
b = 0.75#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 1#
a3 = 0#
a4 = 0.1#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 1#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 1#
a3 = 0#
a4 = 0.4#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 1#
a3 = 0#
a4 = 0.3#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.2#
a2 = 1#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 1#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 10#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 5#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 5#
a3 = 0#
a4 = 0.1#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 5#
a3 = 0#
a4 = 0.3#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 5#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.01#
a2 = 5#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.05#
a2 = 5#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.03#
a2 = 5#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 5#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.015#
a2 = 5#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 6#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 4#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.5#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.6#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.4#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*R - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		dR = a4*I - a1*R#
		list(c(dS,dI,dR))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05, R = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,2000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {#
		dS = a1*(1-S-I) - a2*S*I*I^b - a3#
		dI = a2*S*I*I^b + a3 - a4*I #
		list(c(dS,dI))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,2000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
b = 0.5
eqI1 = (a1 - (a1*(a1^2*a2 + a1*a4^2 + a1^2*a4 + a1*(a1*(a1*a2^2 + 4*a2*a3*a4 + 2*a1*a2*a3*b + 4*a1*a2*a3 - 2*a1*a2*a4 + a1*a3^2*b^2 + 2*a1*a3*a4*b + a1*a4^2))^(1/2) + a4*(a1*(a1*a2^2 + 4*a2*a3*a4 + 2*a1*a2*a3*b + 4*a1*a2*a3 - 2*a1*a2*a4 + a1*a3^2*b^2 + 2*a1*a3*a4*b + a1*a4^2))^(1/2) + a1*a2*a4 - a1^2*a3*b + 2*a1^2*a4*b - a1*a3*a4*b))/(2*(a1^2*a2 + a1*a2*a4 + a1^2*a4*b)))/(a1 + a4)#
#
eqI2 = (a1 - (a1*(a1^2*a2 + a1*a4^2 + a1^2*a4 - a1*(a1*(a1*a2^2 + 4*a2*a3*a4 + 2*a1*a2*a3*b + 4*a1*a2*a3 - 2*a1*a2*a4 + a1*a3^2*b^2 + 2*a1*a3*a4*b + a1*a4^2))^(1/2) - a4*(a1*(a1*a2^2 + 4*a2*a3*a4 + 2*a1*a2*a3*b + 4*a1*a2*a3 - 2*a1*a2*a4 + a1*a3^2*b^2 + 2*a1*a3*a4*b + a1*a4^2))^(1/2) + a1*a2*a4 - a1^2*a3*b + 2*a1^2*a4*b - a1*a3*a4*b))/(2*(a1^2*a2 + a1*a2*a4 + a1^2*a4*b)))/(a1 + a4)#
eqS1 = (a1^2*a2 + a1*a4^2 + a1^2*a4 + a1*(a1*(a1*a2^2 + 4*a2*a3*a4 + 2*a1*a2*a3*b + 4*a1*a2*a3 - 2*a1*a2*a4 + a1*a3^2*b^2 + 2*a1*a3*a4*b + a1*a4^2))^(1/2) + a4*(a1*(a1*a2^2 + 4*a2*a3*a4 + 2*a1*a2*a3*b + 4*a1*a2*a3 - 2*a1*a2*a4 + a1*a3^2*b^2 + 2*a1*a3*a4*b + a1*a4^2))^(1/2) + a1*a2*a4 - a1^2*a3*b + 2*a1^2*a4*b - a1*a3*a4*b)/(2*(a1^2*a2 + a1*a2*a4 + a1^2*a4*b))#
eqS2 = (a1^2*a2 + a1*a4^2 + a1^2*a4 - a1*(a1*(a1*a2^2 + 4*a2*a3*a4 + 2*a1*a2*a3*b + 4*a1*a2*a3 - 2*a1*a2*a4 + a1*a3^2*b^2 + 2*a1*a3*a4*b + a1*a4^2))^(1/2) - a4*(a1*(a1*a2^2 + 4*a2*a3*a4 + 2*a1*a2*a3*b + 4*a1*a2*a3 - 2*a1*a2*a4 + a1*a3^2*b^2 + 2*a1*a3*a4*b + a1*a4^2))^(1/2) + a1*a2*a4 - a1^2*a3*b + 2*a1^2*a4*b - a1*a3*a4*b)/(2*(a1^2*a2 + a1*a2*a4 + a1^2*a4*b))
eqI1
eqI2
eqS1
eqS2
I = seq(0,1,0.01)
plot(I, (1-0.5*I)^-1,type="l")
plot(I, (1-2*I)^-1,type="l")
plot(I, (1-1.25*I)^-1,type="l")
plot(I, (1+0.5*I)^-1,type="l")
plot(I, (1-0.5*I)^-1,type="l")
plot(I, (1-0.95*I)^-1,type="l")
S = 0.3#
I = 0.7#
R = 0#
#
u = 0#
w = 50^-1#
b = .3#
g = 10^-1 #
#
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.3#
#
for(i in 1:nrow(res)) {#
	rand = rnorm(1,0,sd=SD)#
	dS 	= u + w*R - (b*S*I+rand*S) - u*S#
	dI = (b*S*I+rand*S) - g*I - u*I#
	dR = g*I - w*R - u*R#
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
plot(res[,1],res[,2],type="l")
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.#
#
for(i in 1:nrow(res)) {#
	rand = rnorm(1,0,sd=SD)#
	dS 	= w*R - (b*S*I+rand*S)#
	dI = (b*S*I+rand*S) - g*I#
	dR = g*I - w*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
dt = 0.1#
nstep = 1000#
res = matrix(nr = nstep/dt, nc = 5)#
SD = 0.1#
#
for(i in 1:nrow(res)) {#
	rand = rnorm(1,0,sd=SD)#
	dS 	= w*R - (b*S*I+rand*S)#
	dI = (b*S*I+rand*S) - g*I#
	dR = g*I - w*R #
	S 	= S + dS*dt#
	I 	= I + dI*dt#
	R 	= R + dR*dt#
	if(I<0) I = 0#
	if(S>1) S = 1#
	res[i,1] = i*dt#
	res[i,2] = S#
	res[i,3] = I#
	res[i,4] = R#
	res[i,5] = rand	#
	}#
#
plot(res[,1],res[,2],type="l")
library(deSolve)#
#
#########################
# Définition du modèle mathématique#
model = function(Time, State, Pars) {#
with(as.list(c(State,Pars)), {	#
		dS = a1*(1-S-I) - a2*S*I*I^b - a3*S#
		dI = a2*S*I*I^b + a3*S - a4*I #
		list(c(dS,dI))#
	})#
}#
#########################
# Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,2000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
R = 0.1#
I = seq(0,1-R,0.01)#
S = 1-R-S#
#
b = 0.2#
plot(I,S*I^b,type="l")
plot(I,I*I^b,type="l", ylab = "Dispersal probability")
plot(S,I*I^b,type="l", ylab = "Dispersal probability")
S
S = 1-R-I
plot(S,I*I^b,type="l", ylab = "Dispersal probability")
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
b = 0.01
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
b = 0.1
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
b = 0.5
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
b = 1.25
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
b = 5
plot(S,S*I^b,type="l", ylab = "Dispersal probability")
plot(I,S*I^b,type="l", ylab = "Dispersal probability")
Définition des paramètres#
a1 = 0.02#
a2 = 3.9#
a3 = 0#
a4 = 0.2#
b = 0.5#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,2000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
Durée de la simulation#
times = seq(0,250, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
b = 0.55#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,250, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
b = 0.45#
#
# On les rassemble dans un objet appelé pars#
pars = c(a1 = a1, a2 = a2, a3 = a3, a4 = a4, b = b)	#
#
#########################
# Conditions de départ#
N0 = c(S = 0.9, I = 0.05)#
#
######################## #
# Durée de la simulation#
times = seq(0,250, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
16*16
install.packages(pkg=c("ggplot2","plyr","reshape2","gridExtra","hexbin",                 "glmmML","lme4","MCMCglmm","chron",                 "R2jags","coda","MCMCpack",                 "gdata","gtools","gplots","ellipse","plotrix",                 "car","bbmle","rgl","scatterplot3d",                 "abind","aod","arm","beanplot","blme",                 "brglm","rms","Hmisc","optimx","minqa",                 "directlabels","effects","emdbook","R2admb",                 "glmmADMB","influence.ME",                       "mlmRev","multcomp","MuMIn","AICcmodavg",                       "knitr","pscl","RColorBrewer","RLRsim","sos",                       "tweedie"),                dependencies=TRUE,                 repos=c("http://probability.ca/cran",                         "http://r-forge.r-project.org"))install.packages("coefplot2",                 repos="http://www.math.mcmaster.ca/bolker/R",                 type="source")
? ?rbeta
?rbeta
Paramètres:#
# c: taux de colonisation#
# e: taux d'extinction#
# l: pourcentage de dispersion locale#
# N: nombre de patches en X#
# p0: distribution de départ (0: absence, 1: présence, dimension NxN)#
# nstep: nombre de pas de temps#
# D: matrice de destruction d'habitat (0: inhabitable, 1: habitable, dimension NxN)#
#
###########################
#
Levins_local = function(c,e,l,N,p0,nstep,D) {#
	# Initialisation de la la métapopulation#
	metpop = p0	#
	# Matrice dans laquelle on enregistre l'abondnace régionale#
	# au fil du temps#
	res = matrix(nr=nstep,nc=2)#
	# boucle sur les pas de temps#
	for(t in 1:nstep) {#
		# boucle sur les N patches#
		for(n in 1:N^2) {#
			# On choisi une patche au hasard à mettre à jour#
     		x0 = ceiling(runif(1,0,1)*N)#
      		y0 = ceiling(runif(1,0,1)*N)#
			# On vérifie si la patche est habitable#
			if(D[x0,y0] == 1) {#
				# Si la patche est occupée, on teste s'il y a extinction#
				if(metpop[x0,y0] == 1) {#
					# On tire un nombre au hasard entre 0 et 1#
					rand = runif(1,0,1)#
					# On teste si ce nombre est inférieur à la probabilité d'extinction#
					if(rand < e) metpop[x0,y0] = 0#
					}#
				# Si la patche est vide, on teste s'il y a colonisation#
				else {#
					# On tire un nombre au hasard entre 0 et 1#
					rand = runif(1,0,1)#
					# On calcul l'abondance régionale#
					pr = sum(metpop)/N^2		#
					# On calcul l'abondance dans le voisinage#
					# On tient compte de la forme de torus de la lattice#
					# On crée d'abord un compteur du nombre de voisins occupés#
			        pl = 0#
			        # Ensuite on calcul la densité sur les 8 voisins#
			        for(x in -1:1) {#
	    		      for(y in -1:1) {#
	        		    # Si on dépasse les marges de la lattice, on rejoint les bordures#
	            		if(x0 + x < 1) x1 = N#
	            		else if(x0 + x > N) x1 = 1#
	            		else x1 = x0 + x#
	  		            if(y0 + y < 1) y1 = N#
    	        		else if(y0 + y > N) y1 = 1#
    	        		else y1 = y0 + y#
#
   		         		if(x1 != 0 & y1!= 0)#
    	              		if(D[x1,y1]==1 & metpop[x1,y1] == 1) pl = pl+1#
    	        		}#
    	    		}#
					# On calcul le taux de colonisation moyen#
					col = l*c*pl/8 + (1-l)*c*pr#
					# On test s'il y a colonisation#
					if(rand < col) metpop[x0,y0] = 1#
				}	#
			}								#
		}#
		# À chaque pas de temps, on enregistre l'abondance#
		res[t,1] = t#
		res[t,2] = sum(metpop)/N^2				#
		}#
	return(list(res,metpop))#
	}#
# Exemple#
c = 0.5#
e = 0.35#
l = 0.1#
N = 25#
p0 = matrix(0,nr=N,nc=N)#
p0[matrix(runif(N^2,0,1),nr=N,nc=N)<0.1]=1#
D = matrix(1,nr=N,nc=N)#
#
# Illustration de l'abondance régionale au fil du temps#
s0 = Levins_local(c=c,e=e,l=0,N=N,p0=p0,nstep=250,D=D)#
s1 = Levins_local(c=c,e=e,l=0.9,N=N,p0=p0,nstep=250,D=D)#
quartz()#
par(mar=c(5,6,2,1))#
plot(s0[[1]][,1],s0[[1]][,2],type="l",xlab = "Temps", ylab = "Abondance régionale",cex.axis = 1.5,cex.lab=2)#
lines(s1[[1]][,1],s1[[1]][,2],col="red")#
#
# Illustration de la distribution spatiale au terme de la simulation#
quartz()#
par(mar=c(5,6,2,1))#
image(c(1:N),c(1:N),s0[[2]],cex.axis = 1.5, cex.lab = 2,col=gray(c(0,1)),xlab = "X", ylab = "Y", main = "Dispersion globale")#
#
quartz()#
par(mar=c(5,6,2,1))#
image(c(1:N),c(1:N),s1[[2]],cex.axis = 1.5, cex.lab = 2,col=gray(c(0,1)),xlab = "X", ylab = "Y", main = "Dispersion locale")
22*35*.9
rm(list = ls())#
source("geograph.R")#
source("niche_model.R")#
source("metaweb_model.R")
rm(list = ls())#
source("geograph.R")#
source("niche_model.R")#
source("metaweb_model.R")#
#
N = 100#
S = 25#
L = niche_model(S=S,C=0.4)
L
Function calculating the statistics of food webs#
# Input is a binary link matrix#
# Returns a list with all the stats#
# October 2011#
# Dominique Gravel#
###################
#
stats_fn = function(L) {#
#
  source("dbase_fn.R")#
  library(NetIndices)#
#
  # Calculate the number of species#
  NS = nrow(L)#
  # Number of predators#
  NPred = apply(L,1,sum)#
  # Number of preys#
  NPrey = apply(L,2,sum)#
  # Calculate the number of producers#
  Prod = numeric(NS)#
  Prod[NPrey == 0] = 1#
  NProd = sum(Prod)#
  # Calculate which species is top				#
  Top = numeric(NS)#
  Top[NPred==0]=1#
  Top[Prod==1]=0#
  NTop = sum(Top)  #
#
  # Calculate the number of intermediate #
  NInt = NS-NProd-NTop#
  # Calculate the fraction of herbivores#
  DBase = dbase_fn(L)#
  Herb = numeric(NS)#
  Herb[DBase==2] = 1#
  NHerb = sum(Herb)#
  # Calculate the number of links#
  NL = sum(L)#
#
  # Calculate directed connectance#
  C = NL/NS^2#
  # SD of generality (only for consumers)#
  GenSD = sd(NPrey[Prod==0])#
#
  # Calculate vulnerability (following Wiliams and Martinez)#
  VulSD = sd(NPred)#
  # Calculate mean and max distance to basal species #
  MeanDBase = mean(DBase)#
  MaxDBase = max(DBase)	#
#
  # Calculate mean/max trophic rank#
  tr = TrophInd(L)[,1]#
  MeanTR = mean(tr)#
  MaxTR = max(tr)#
#
  # Calculate the average omnivory index#
  Omn = mean(TrophInd(L)[,2])#
  # Report the results	#
  res = c(NS=NS,NProd=NProd,NInt=NInt,NTop=NTop,NHerb=NHerb,NL=NL,C=C,GenSD=GenSD,VulSD=VulSD,MeanDBase=MeanDBase,MaxDBase=MaxDBase,MeanTR=MeanTR,MaxTR=MaxTR,Omn=Omn)#
  return(res)#
}
stats_fn(L)
L = niche_model(S=S,C=0.3)
stats_fn(L)
L = niche_model(S=S,C=0.3)
stats_fn(L)
N = 100#
S = 25#
L = niche_model(S=S,C=0.3)#
diag(L) = 0 # Prevent cannibalism#
c = 0.1#
ei = 0.3#
ed = 0.1#
Patches = geograph(N,0.2)#
XY = Patches[[1]]#
ConMat = Patches[[2]]#
Dest = numeric(N)#
Env = numeric(N) + 0.5#
#Env = runif(N,0,1)#
Optimum = runif(S,0,1) #
Breadth = numeric(S) + Inf#
p0 = matrix(1,N,S)#
nsteps = 100#
FractUpdate = 1#
#
results = metaweb_model(L,Optimum,Breadth,c,ei,ed,ConMat,Dest,Env,pO,nsteps,FractUpdate)#
#
# Illustrate regional dynamics over time#
quartz(height = 5, width = 6)#
par(mar=c(5,6,2,1))#
plot(results[[2]][,1],results[[2]][,2],type = "l", xlab = "Time", ylab = "Occupancy", cex.lab = 1.5, cex.axis = 1.25,ylim=c(0,1))#
for(i in 2:S) lines(results[[2]][,1],results[[2]][,i])
Illustrate spatial distribution of biodiversity#
quartz(height = 5, width = 6)#
par(mar=c(5,6,2,1))#
s = apply(results[[1]],1,sum)/S#
col.vec = numeric(length(s))#
RK = rank(s)#
for(i in 1:N) col.vec[i] = rainbow(N,start = 0, end = 0.7)[RK[i]]#
plot(XY[,1],XY[,2],xlab = "X", ylab = "Y",cex.lab = 1.5, cex.axis = 1.25)#
ConVec = stack(as.data.frame(ConMat))[,1]#
XX = expand.grid(XY[,1],XY[,1])#
YY = expand.grid(XY[,2],XY[,2])#
XX = subset(XX,ConVec==1)#
YY = subset(YY,ConVec==1)#
arrows(x0 = XX[,1],x1=XX[,2],y0 = YY[,1], y1 = YY[,2], length = 0,lwd = 0.1)#
points(XY[,1],XY[,2],pch=21,bg=col.vec)
results = metaweb_model(L,Optimum,Breadth,c,ei,ed,ConMat,Dest,Env,pO,nsteps,FractUpdate)
Illustrate spatial distribution of biodiversity#
quartz(height = 5, width = 6)#
par(mar=c(5,6,2,1))#
s = apply(results[[1]],1,sum)/S#
col.vec = numeric(length(s))#
RK = rank(s)#
for(i in 1:N) col.vec[i] = rainbow(N,start = 0, end = 0.7)[RK[i]]#
plot(XY[,1],XY[,2],xlab = "X", ylab = "Y",cex.lab = 1.5, cex.axis = 1.25)#
ConVec = stack(as.data.frame(ConMat))[,1]#
XX = expand.grid(XY[,1],XY[,1])#
YY = expand.grid(XY[,2],XY[,2])#
XX = subset(XX,ConVec==1)#
YY = subset(YY,ConVec==1)#
arrows(x0 = XX[,1],x1=XX[,2],y0 = YY[,1], y1 = YY[,2], length = 0,lwd = 0.1)#
points(XY[,1],XY[,2],pch=21,bg=col.vec)
x = runif(100,0,1)
y = rnorm(100,1,0.2)
range(x)
range(y)
x = runif(100,0,1)#
y = rnorm(100,1,0.2)#
#
hist_x = hist(x)#
hist_y = hist(y)
barplot(x)
?hist
hist_x = hist(x, breaks = 10)
hist_y = hist(y, breaks = 10)
hist_x
barplot(hist_x$counts/Nx)
hist_x = hist(x, breaks = 10)
hist_y = hist(y, breaks = 10)
Nx = length(x)
Ny = length(y)
barplot(hist_x$counts/Nx)
?barplot
barplot(hist_x$counts/Nx,names.arg = hist_x$breaks)
hist_x$breaks
?hist
breaks = seq(0.1,1,0.1)
hist_x = hist(x, breaks = breaks)
hist_y = hist(y, breaks = breaks)
breaks = seq(0,1,0.1)
hist_x = hist(x, breaks = breaks)
hist_y = hist(y, breaks = breaks)
y = rnorm(100,0.5,0.1)
range(y)
x = runif(100,0,1)#
y = rnorm(100,0.5,0.1)#
breaks = seq(0,1,0.1)#
#
hist_x = hist(x, breaks = breaks)#
hist_y = hist(y, breaks = breaks)
hist_x
barplot(hist_x$counts/Nx,names.arg = breaks)
mat = cbind(hist_x$counts/Nx,hist_y$counts)
row.names(mat) = breaks
mat = cbind(hist_x$counts/Nx,hist_y$counts)
row.names(mat) = breaks
mat
mat = cbind(hist_x$counts/Nx,hist_y$counts/Ny)
mat
barplot(mat)
barplot(mat,beside = TRUE)
mat = t(mat)
barplot(mat,beside = TRUE)
mat = rbind(hist_x$counts/Nx,hist_y$counts/Ny)
barplot(mat,beside = TRUE)
row.names(mat) = breaks
dim(mat)
length(breaks)
names.arg = seq(0.1,1,.1)
barplot(mat,beside = TRUE,names.arg = names.arg)
?barplot
barplot(mat,beside = TRUE,names.arg = names.arg, space = 0.1)
barplot(mat,beside = TRUE,names.arg = names.arg, space = 0.5)
barplot(mat,beside = TRUE,names.arg = names.arg)
barplot(mat,beside = TRUE,names.arg = names.arg,space = c(0,1))
barplot(mat,beside = TRUE,names.arg = names.arg,space = c(0,0.5))
barplot(mat,beside = TRUE,names.arg = names.arg,space = c(0,0.5), xlab = "R2")
barplot(mat,beside = TRUE,names.arg = names.arg,space = c(0,0.5), xlab = "R2",ylab = "Frequency")
barplot(mat,beside = TRUE,names.arg = names.arg,space = c(0,0.5), xlab = "R2",ylab = "Frequency",cex.lab = 1.5, cex.axis = 1.25)
par(mar = c(5,6,2,1).mfcol = c(1,3))
barplot(mat,beside = TRUE,names.arg = names.arg,space = c(0,0.5), xlab = "R2",ylab = "Frequency",cex.lab = 1.5, cex.axis = 1.25)
par(mar = c(5,6,2,1),mfcol = c(1,3))
barplot(mat,beside = TRUE,names.arg = names.arg,space = c(0,0.5), xlab = "R2",ylab = "Frequency",cex.lab = 1.5, cex.axis = 1.25)
par(mar = c(5,6,2,1),mfcol = c(3,1))
barplot(mat,beside = TRUE,names.arg = names.arg,space = c(0,0.5), xlab = "R2",ylab = "Frequency",cex.lab = 1.5, cex.axis = 1.25)
barplot(mat,beside = TRUE,names.arg = names.arg,space = c(0,0.5), xlab = "R2",ylab = "Frequency",cex.lab = 1.5, cex.axis = 1.25)
barplot(mat,beside = TRUE,names.arg = names.arg,space = c(0,0.5), xlab = "R2",ylab = "Frequency",cex.lab = 1.5, cex.axis = 1.25)
mtext("A)", side = 3)
mtext("A)", side = 1)
mtext("A)", side = 3)
?mtext
barplot(mat,beside = TRUE,names.arg = names.arg,space = c(0,0.5), xlab = "R2",ylab = "Frequency",cex.lab = 1.5, cex.axis = 1.25)#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
barplot(mat,beside = TRUE,names.arg = names.arg,space = c(0,0.5), xlab = "R2",ylab = "Frequency",cex.lab = 1.5, cex.axis = 1.25)#
mtext(text="B)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
barplot(mat,beside = TRUE,names.arg = names.arg,space = c(0,0.5), xlab = "R2",ylab = "Frequency",cex.lab = 1.5, cex.axis = 1.25)#
mtext(text="C)",side=3,line=0.5,adj=-0.1,cex=1.25)
barplot(mat,beside = TRUE,names.arg = names.arg,space = c(0,0.5), xlab = "R2",ylab = "Frequency",cex.lab = 2, cex.axis = 1.5)#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
barplot(mat,beside = TRUE,names.arg = names.arg,space = c(0,0.5), xlab = "R2",ylab = "Frequency",cex.lab = 2, cex.axis = 1.5)#
mtext(text="B)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
barplot(mat,beside = TRUE,names.arg = names.arg,space = c(0,0.5), xlab = "R2",ylab = "Frequency",cex.lab = 2, cex.axis = 1.5)#
mtext(text="C)",side=3,line=0.5,adj=-0.1,cex=1.25)
